<#
    .SYNOPSIS
    Allows creating and plublish the NuGet package of your library. 
    .DESCRIPTION
    Uses the value generated by the dotnet-gitversion command to:
        1. Determine the package version to be published.
        2. Update the values of the fields Version, AssemblySemVer, and AssemblySemFileVer in the *.csproj with the values of the variables SemVer, AssemblySemVer, and AssemblySemFileVer, respectively.
        3. Publish library into Private Nuget Feed.
    Known issue: The first time the script is executed, it always fails, and the cause has not been identified yet. For now, the solution is to run the script twice.

    .PARAMETER projectName
    Name of the project that contains the definition of your library
    .PARAMETER releaseMode
    Indicate the build mode of the project. You can use the values Debug or Release.
    .PARAMETER SOURCE_NAME
    Name of the NuGet package source where you want to upload your library. 
    NOTE: The source must be previously registered in your environment.
    .PARAMETER API_KEY
    The API KEY with which your library will be registered in the package source. It is mandatory if the value of the -SOURCE_NAME parameter is different from NULL.
    .EXAMPLE
    PS> build_and_pack.ps1 -projectName Davivienda.Framework.Services.CanonicalSignature -releaseMode Debug
    .EXAMPLE
    PS> build_and_pack.ps1 -projectName Davivienda.Framework.Services.CanonicalSignature -releaseMode Debug -SOURCE_NAME Name -API_KEY API_KEY_VALUE
#>
param (
    [Parameter(Mandatory)]
    [string]$projectName,
    [Parameter(Mandatory)]
    [string]$releaseMode,
    [Parameter()]
    [string]$SOURCE_NAME,
    [Parameter()]
    [string]$API_KEY
)

# Build
$build = $false
if ($SOURCE_NAME -ne $null -and $API_KEY -ne $null -and $SOURCE_NAME -ne "" -and $API_KEY -ne "") {
    $push = $true
} else {
    $push = $false
}
$rootPath = Get-Location
$projectPath = Join-Path $rootPath $projectName
$nugetFolder = Join-Path $rootPath $projectName "nuget"
$projectFilePath = Join-Path $projectPath "$projectName.csproj"

$semVer = dotnet-gitversion /showvariable SemVer
$nuGetVersionV2 = dotnet-gitversion /showvariable NuGetVersionV2
$assemblySemVer = dotnet-gitversion /showvariable AssemblySemVer
$assemblySemFileVer = dotnet-gitversion /showvariable AssemblySemFileVer

if (Test-Path $projectFilePath) {
    $proj = [xml](Get-Content $projectFilePath)

    $versionNode = $proj.SelectSingleNode("Project/PropertyGroup/Version");
    if ($versionNode -ne $null -and $versionNode."#text" -ne $semVer) {
        Write-Host "Updating version in *.csproj."   
        $versionNode."#text" = $semVer
        $build = $true
    }

    $assemblySemVerNode = $proj.SelectSingleNode("Project/PropertyGroup/AssemblySemVer");
    if ($assemblySemVerNode -ne $null -and $assemblySemVerNode."#text" -ne $assemblySemVer) {       
        Write-Host "Updating AssemblySemVer in *.csproj."    
        $assemblySemVerNode."#text" = $assemblySemVer
        $build = $true
    }

    $assemblySemFileVerNode = $proj.SelectSingleNode("Project/PropertyGroup/AssemblySemFileVer");
    if ($assemblySemFileVerNode -ne $null -and $assemblySemFileVerNode."#text" -ne $assemblySemFileVer) {        
        Write-Host "Updating AssemblySemFileVer in *.csproj."    
        $assemblySemFileVerNode."#text" = $assemblySemFileVer
        $build = $true
    }
    $proj.Save($projectFilePath)
}
else {
    Write-Host "File $projectFilePath not found."
    exit 0
}

if ($build) {
    try {
        dotnet build $projectFilePath --configuration $releaseMode --verbosity q
        
        dotnet pack $projectFilePath --configuration $releaseMode --no-build --no-restore --output $nugetFolder --version-suffix $nuGetVersionV2 --verbosity q
        Write-Host "NuGet package '$projectName.$nuGetVersionV2.nupkg' has been created in folder '$nugetFolder'."         
    }
    catch {
        Write-Host "An error occurred during build: $($_.Exception.Message)"
        exit 0
    }
} 

if ($push -and $build) {
    try {
        $pkgName = "$projectName.$nuGetVersionV2.nupkg"        
        Write-Host "Packaging..."
        Set-Location $nugetFolder
        dotnet nuget push $pkgName --source $SOURCE_NAME --api-key $API_KEY --skip-duplicate
        Set-Location $rootPath
    }
    catch {
        Write-Host "An error occurred while packing and publishing the NuGet package: $($_.Exception.Message)"
        exit 0
    }
}

